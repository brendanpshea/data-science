{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyNru5rK+zz+yinhBl9F3lFL",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/brendanpshea/data-science/blob/main/Data_Science_1Review.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Data Science: A Review of Basic Concepts\n",
        "### Brendan SHea, PHD\n",
        "\n",
        "Hello! I am (the completely fictional) Dr. Samuel Endgame, a junior data scientist specializing in epidemiology. Imagine a world where tiny, invisible organisms can affect our lives in profound ways. That's the world of epidemiology, where we study the spread of diseases, how they impact populations, and what we can do to stop them. It's like being a detective, but instead of solving crimes, we solve puzzles about health and illness. We use tools like data analysis and statistical modeling to understand these puzzles. Our work helps keep people safe and healthy, and it's always exciting because we're constantly learning new things about how to fight diseases.\n",
        "\n",
        "Brendan's Note: This chapter is aligned to the terminology and learning outcomes of the **CompTia Data+ certification**, an entry-level exam for aspiring data scientists. This will allow us to review much of the material we've learned over the course of the semester. I created a fictional \"character\" to make covering all of the terms a bit more fun (hopefully!).\n",
        "\n",
        "You'll note here that some of the code examples--mostly in Python, R, or SQL--go siginficantly beyond what we've covered so far in this class. The goal here is NOT to master the particular techniques. Rather, I want you to see what some of the abstract ideas we will talk about \"look like\" in pratice. (And, if you choose to take the exam, it's good to be able to \"read\" code and be able to explain roughly what is happening)."
      ],
      "metadata": {
        "id": "Y1hsci-Y84Ej"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "## How Does Data Science Aid in Predicting Disease Outbreaks?\n",
        "\n",
        "In the realm of epidemiology, data science serves as a powerful ally, particularly in predicting disease outbreaks. This process involves analyzing large datasets to identify patterns and trends that could indicate an impending outbreak. The key concepts here include data mining, statistical modeling, and predictive analytics.\n",
        "\n",
        "**Data mining** refers to the process of exploring large datasets to uncover meaningful patterns and insights. In the context of disease outbreaks, this could involve identifying clusters of illness or changes in the rate of disease occurrence.\n",
        "\n",
        "**Statistical modeling** involves creating mathematical models to represent the real-world processes behind the data. In epidemiology, such models can simulate how diseases spread through populations, considering various factors like transmission rates and population density.\n",
        "\n",
        "**Predictive analytics** is the use of statistical models to make predictions about future events. In disease outbreak prediction, these analytics can forecast the likelihood of an outbreak occurring, its potential severity, and which populations may be most affected.\n",
        "\n",
        "### Example: Predicting Flu Outbreaks\n",
        "\n",
        "Let's consider a practical example using Python. Suppose we're trying to predict a flu outbreak. We might start by collecting data on flu cases from previous years, along with relevant variables like weather conditions, population density, and vaccination rates. Our goal is to build a model that can predict the number of flu cases based on these variables.\n",
        "\n",
        "First, we'd perform data preprocessing to clean and organize our data. This step is crucial for ensuring the quality and accuracy of our analysis.\n",
        "\n",
        "```python\n",
        "import pandas as pd\n",
        "\n",
        "# Load the dataset\n",
        "flu_data = pd.read_csv('flu_data.csv')\n",
        "\n",
        "# Preprocessing steps\n",
        "flu_data.dropna(inplace=True)  # Removing missing values\n",
        "flu_data['date'] = pd.to_datetime(flu_data['date'])  \n",
        "# Converting dates to datetime objects\n",
        "```\n",
        "\n",
        "Next, we'd explore the data to understand patterns and correlations. This might involve generating plots or calculating statistics.\n",
        "\n",
        "```python\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Visualizing the number of flu cases over time\n",
        "plt.figure(figsize=(12,6))\n",
        "sns.lineplot(x='date', y='flu_cases', data=flu_data)\n",
        "plt.title('Flu Cases Over Time')\n",
        "plt.show()\n",
        "```\n",
        "\n",
        "Finally, we'd build a predictive model. A common choice for this kind of time-series data is a seasonal ARIMA (AutoRegressive Integrated Moving Average) model, which can handle seasonality in data, like the annual flu season.\n",
        "\n",
        "```python\n",
        "from statsmodels.tsa.arima.model import ARIMA\n",
        "\n",
        "# Building the ARIMA model\n",
        "model = ARIMA(flu_data['flu_cases'], order=(1, 1, 1), seasonal_order=(1, 1, 1, 12))\n",
        "results = model.fit()\n",
        "\n",
        "# Predicting flu cases for the next 12 months\n",
        "predictions = results.forecast(steps=12)\n",
        "```\n",
        "\n",
        "This example illustrates how data science techniques enable us to anticipate and prepare for potential health crises, ultimately contributing to more effective public health interventions."
      ],
      "metadata": {
        "id": "JMIQ2SqteSoK"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## How Do Various Database Structures and Schemas Support Epidemiological Data Analysis?\n",
        "\n",
        "In epidemiology, the effective management and analysis of data are crucial. This requires understanding different types of databases and schema concepts. Let's dive into these concepts and explore how they are utilized in epidemiological research.\n",
        "\n",
        "**Relational databases** are structured to recognize relationships among stored items of information. They use a table format, where each row is a record with a unique identifier (like a patient ID), and each column is a specific attribute (like age, sex, diagnosis). This structure is excellent for maintaining data accuracy and consistency.\n",
        "\n",
        "**Non-relational databases**, or NoSQL databases, are more flexible in terms of the data they can store and how they store it. They are ideal for unstructured data, like text or multimedia, and can handle large volumes of data efficiently, which is often the case in epidemiological studies.\n",
        "\n",
        "**Data marts, data warehousing, and data lakes** are concepts used to store and manage large amounts of data. A data mart is a subset of a data warehouse, focused on a specific area (like a specific disease). A data warehouse is a centralized repository for all data collected by an organization, while a data lake stores raw data in its native format.\n",
        "\n",
        "**Online Transactional Processing (OLTP)** and **Online Analytical Processing (OLAP)** represent two types of data processing. OLTP is used for managing transaction data, like patient records in a hospital. OLAP is used for complex queries and analysis, like identifying trends in disease spread across a population.\n",
        "\n",
        "Schema concepts like **Snowflake** and **Star schemas** organize data in a warehouse. The Star schema has a central fact table (like \"patient visits\") linked to dimension tables (like \"time\", \"patient\", \"disease\"). The Snowflake schema is a more complex version where dimension tables are normalized.\n",
        "\n",
        "Slowly changing dimensions are an approach to managing historical data in databases. They allow for keeping either the most current information or both historical and current information. This is particularly important in epidemiology for tracking the progression and changes in disease patterns over time.\n",
        "\n",
        "### Example: Tracking Disease Spread with Relational Databases\n",
        "\n",
        "In my role, I often use relational databases to track and analyze the spread of diseases. Let's consider a simple example using Python and SQLite, a lightweight relational database.\n",
        "\n",
        "Suppose we have two tables: `Patients` and `Disease_Cases`. `Patients` contains basic patient information, and `Disease_Cases` tracks individual instances of disease cases.\n",
        "\n",
        "This structure allows us to perform complex queries to understand the spread of a particular disease, identify high-risk groups, or evaluate the effectiveness of interventions."
      ],
      "metadata": {
        "id": "u-ExbtWT97Gd"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# First, we create a database and connect to it\n",
        "%load_ext sql\n",
        "%sql sqlite:///medical_data.db"
      ],
      "metadata": {
        "id": "6jsvw87qTZzd"
      },
      "execution_count": 1,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "%%sql\n",
        "--A script to create two tables\n",
        "CREATE TABLE Patients(\n",
        "  PatientID INT PRIMARY KEY,\n",
        "  Name VARCHAR(40) NOT NULL,\n",
        "  Age INT NOT NULL,\n",
        "  Sex CHAR(3) NOT NULL);\n",
        "\n",
        "CREATE TABLE Disease_Cases(\n",
        "  CaseID INT PRIMARY KEY,\n",
        "  PatientID INT NOT NULL,\n",
        "  Blood_Pressure INT NOT NULL,\n",
        "  Disease VARCHAR(255) NOT NULL,\n",
        "  Date_Reported DATE NOT NULL,\n",
        "  FOREIGN KEY (PatientID) REFERENCES Patients (PatientID))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "k_jJ_vN6Tt9h",
        "outputId": "82220592-80f5-4283-aca0-efda741d51b1"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            " * sqlite:///medical_data.db\n",
            "Done.\n",
            "Done.\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[]"
            ]
          },
          "metadata": {},
          "execution_count": 2
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## What Are the Characteristics of Different Data Structures and File Formats in Epidemiology, and How Are They Structured?\"\n",
        "\n",
        "In epidemiology, the structure of data and the format in which it is stored significantly impact how it is processed and analyzed. **Structured Data** is highly organized and easy to manipulate, comprising defined rows and columns in databases or spreadsheets and key-value pairs in formats like JSON. By contrast, **unstructured data** lacks a predefined format, making it more complex to process. It encompasses undefined fields and diverse forms such as text, images, or machine data like logs.\n",
        "\n",
        "### Data File Formats and Their Structures:\n",
        "\n",
        "#### Text/Flat Files\n",
        "\n",
        "**Tab Delimited:** Each data field is separated by a tab.\n",
        "\n",
        "```\n",
        "PatientID\tName\tAge\tDiagnosis\n",
        "C001\tBeth Emhoff\t33\tMeningoencephalitis\n",
        "C002\tMitch Emhoff\t40\tImmune\n",
        "```\n",
        "\n",
        "**Comma Delimited (CSV):** Data fields are separated by commas.\n",
        "\n",
        "```\n",
        "PatientID,Name,Age,Diagnosis\n",
        "Z001,Gerry Lane,40,Healthy\n",
        "Z002,Karin Lane,38,Healthy\n",
        "```\n",
        "\n",
        "#### JavaScript Object Notation (JSON):\n",
        "JSON structures data in a format that is both human-readable and machine-readable.\n",
        "\n",
        "```javascript\n",
        "{\n",
        "        \"patients\": [\n",
        "            {\n",
        "                \"PatientID\": \"L001\",\n",
        "                \"Name\": \"Robert Neville\",\n",
        "                \"Age\": 42,\n",
        "                \"Diagnosis\": \"Immune\"\n",
        "            },\n",
        "            {\n",
        "                \"PatientID\": \"L002\",\n",
        "                \"Name\": \"Anna Montez\",\n",
        "                \"Age\": 28,\n",
        "                \"Diagnosis\": \"Healthy\"\n",
        "            }\n",
        "        ]\n",
        "}\n",
        "```\n",
        "\n",
        "#### Extensible Markup Language (XML)\n",
        "XML uses tags to define elements and structure data hierarchically.\n",
        "```xml\n",
        "<patients>\n",
        "        <patient>\n",
        "            <PatientID>D001</PatientID>\n",
        "            <Name>Jim</Name>\n",
        "            <Age>29</Age>\n",
        "            <Diagnosis>Healthy</Diagnosis>\n",
        "        </patient>\n",
        "        <patient>\n",
        "            <PatientID>D002</PatientID>\n",
        "            <Name>Selena</Name>\n",
        "            <Age>26</Age>\n",
        "            <Diagnosis>Healthy</Diagnosis>\n",
        "        </patient>\n",
        "</patients>\n",
        "```\n",
        "\n",
        "#### Hypertext Markup Language (HTML)\n",
        "HTML uses tags to structure content for web pages. While not typically used for data storage in epidemiology, it's essential for presenting findings, and is often a source for data to be \"scraped\" from the web.\n",
        "\n",
        "```html\n",
        "<html>\n",
        "        <body>\n",
        "            <h1>Project Wildfire Epidemiology Data</h1>\n",
        "            <table>\n",
        "                <tr>\n",
        "                    <th>PatientID</th>\n",
        "                    <th>Name</th>\n",
        "                    <th>Age</th>\n",
        "                    <th>Diagnosis</th>\n",
        "                </tr>\n",
        "                <tr>\n",
        "                    <td>W001</td>\n",
        "                    <td>Dr. Stone</td>\n",
        "                    <td>45</td>\n",
        "                    <td>Researcher</td>\n",
        "                </tr>\n",
        "                <!-- More rows... -->\n",
        "            </table>\n",
        "        </body>\n",
        "    </html>\n",
        "```"
      ],
      "metadata": {
        "id": "Fa-i87LVAdQX"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## How Do Integration and Data Collection Methods Facilitate Comprehensive Epidemiological Analysis?\n",
        "\n",
        "In epidemiology, integrating data from various sources and collecting data through multiple methods are crucial for comprehensive analysis. Understanding these processes is key to generating reliable and insightful epidemiological data.\n",
        "\n",
        "- **Extract, Transform, Load (ETL)** is a process where data is extracted from various sources, transformed into a consistent format, and then loaded into a storage system. This is particularly useful when dealing with data from multiple healthcare systems or studies.\n",
        "\n",
        "- **Extract, Load, Transform (ELT)** is similar to ETL, but the order of operations is different. Data is first extracted and loaded into a data warehouse, and then transformed as needed. This approach is becoming more popular with the advent of cloud computing, as it allows for greater flexibility in data processing.\n",
        "\n",
        "- **Delta Load** refers to the process of only loading the changes (or deltas) in data since the last load. This is efficient in ongoing studies where data is continuously updated, such as tracking the spread of a disease over time.\n",
        "\n",
        "- **Application Programming Interfaces (APIs)** allow for the automated retrieval of data from external sources, such as public health databases or research databases. They are crucial for real-time data integration in epidemiological studies.\n",
        "\n",
        "### Data Collection Methods\n",
        "\n",
        "- **Web Scraping** involves programmatically extracting data from websites. It's useful for gathering epidemiological data from online sources, such as news reports on disease outbreaks.\n",
        "- Many epidemiological studies rely on data from **public databases**, such as the WHO or CDC, which provide extensive datasets on various health indicators and disease outbreaks.\n",
        "- As mentioned, APIs provide a way to automatically collect data from various online services, which is essential for real-time monitoring and analysis in epidemiology.\n",
        "- **Surveys** are a primary method for collecting epidemiological data directly from individuals, including information on health status, risk factors, and lifestyle.\n",
        "- **Sampling** involves selecting a subset of a population for study. It's a fundamental method in epidemiology to make inferences about a larger population.\n",
        "- Direct **observation** is used in field studies to collect data on health behaviors, environmental conditions, and disease symptoms.\n",
        "\n",
        "### Example: Data Integration Using Python\n",
        "\n",
        "Let's consider an example of data integration using Python, where we combine data from a public database and an API.\n",
        "\n",
        "Extracting Data from a Public Database (CSV File):\n",
        "\n",
        "```python\n",
        "import pandas as pd\n",
        "\n",
        "# Reading epidemiological data from a CSV file\n",
        "public_data = pd.read_csv('public_health_data.csv')\n",
        "print(public_data.head())\n",
        "\n",
        "```\n",
        "\n",
        "Retrieving Data from an API:\n",
        "\n",
        "```python\n",
        "import requests\n",
        "import json\n",
        "\n",
        "# Making a request to a public health API\n",
        "response = requests.get('https://api.publichealth.org/diseases')\n",
        "api_data = response.json()\n",
        "\n",
        "# Converting API data to a DataFrame\n",
        "api_df = pd.DataFrame(api_data['diseases'])\n",
        "print(api_df.head())\n",
        "```\n",
        "\n",
        "In this example, we extract data from a CSV file and an API, demonstrating how diverse data sources can be integrated for comprehensive epidemiological analysis."
      ],
      "metadata": {
        "id": "bbiFzPUlMI5W"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Why is Data Cleaning Essential in Epidemiological Studies, and What Issues Does it Address?\n",
        "\n",
        "In epidemiology, **data cleaning** is a critical step to ensure the accuracy and reliability of research findings. It addresses several issues that can skew results or mislead conclusions. Reasons for cleaning data include:\n",
        "\n",
        "- **Duplicate Data** (repeated entries) can lead to overrepresentation of certain data points, affecting statistical analyses and outcomes.\n",
        "- Similar to duplicates, **redundant data** includes information that is repeated in different formats. It can complicate analysis and storage, leading to inefficiency.\n",
        "- Epidemiological datasets often have **missing values**, which can bias results if not handled properly. Methods to address this include data imputation or removal of incomplete records.\n",
        "- **Invalid data** are entries that do not conform to the expected format or range (e.g., a negative age). Identifying and correcting these anomalies is crucial for maintaining the integrity of the dataset.\n",
        "- **Non-parametric Data** does not fit a normal distribution, which can affect certain types of statistical analyses. Identifying and transforming non-parametric data can be essential for appropriate analysis.\n",
        "- **Outliers** are data points that deviate significantly from the majority of data. While sometimes these are valid and reveal important findings, they can also result from errors and need to be examined.\n",
        "- **Specification Mismatch** occurs when data collected from different sources do not follow the same specifications or standards, leading to inconsistencies.\n",
        "- **Data Type Validation** involves ensuring that each data field conforms to its expected data type (e.g., numeric, date, text) is important for accurate processing and analysis.\n",
        "\n",
        "### Example: Data Cleaning in R (on Swiss Fertility Data)\n",
        "\n",
        "Consider an example of data cleaning in R, a commonly used language in epidemiology. We'll address issues like missing values, duplicate data, and outliers.\n",
        "\n",
        "In this R script (which we are going to run \"inside\" Python using the rpy2 library), we first remove duplicates and handle missing values. Then, we identify and remove outliers based on a specific criterion (e.g., the 99th percentile of age). This ensures our dataset is more accurate and representative for subsequent analysis."
      ],
      "metadata": {
        "id": "u1FtC76ONiAq"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import rpy2.robjects as robjects\n",
        "from rpy2.robjects import pandas2ri\n",
        "from IPython.display import Image\n",
        "\n",
        "# Enable automatic conversion between Pandas dataframes and R data frames\n",
        "pandas2ri.activate()\n",
        "\n",
        "# Writing the R script as a multi-line string\n",
        "r_script = '''\n",
        "library(tidyverse)\n",
        "\n",
        "# Load the swiss dataset\n",
        "data(swiss)\n",
        "data <- swiss\n",
        "\n",
        "# Removing duplicates (though swiss dataset likely has none)\n",
        "data <- distinct(data)\n",
        "\n",
        "# Handling missing values - swiss doesn't have NA, but included for completeness\n",
        "clean_data <- na.omit(data)\n",
        "\n",
        "# Identifying and handling outliers\n",
        "# Save the boxplot as an image\n",
        "png(file = \"boxplot.png\")\n",
        "boxplot(swiss$Fertility, main=\"Fertility Boxplot\", xlab=\"Fertility\")\n",
        "dev.off()\n",
        "\n",
        "# Removing outliers\n",
        "fertility_limit <- quantile(swiss$Fertility, 0.99)\n",
        "clean_data <- subset(swiss, Fertility <= fertility_limit)\n",
        "\n",
        "# Print the cleaned data\n",
        "print(head(clean_data))\n",
        "'''\n",
        "\n",
        "# Execute the R script\n",
        "robjects.r(r_script)\n",
        "\n",
        "# Display the saved boxplot image\n",
        "Image(filename='boxplot.png')\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 740
        },
        "id": "6JDY2lcwmAR-",
        "outputId": "8e21b6e2-bedb-4b0b-dad3-d13c705067ed"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "           Fertility Agriculture Examination Education Catholic\n",
            "Courtelary      80.2        17.0          15        12     9.96\n",
            "Delemont        83.1        45.1           6         9    84.84\n",
            "Moutier         85.8        36.5          12         7    33.77\n",
            "Neuveville      76.9        43.5          17        15     5.16\n",
            "Porrentruy      76.1        35.3           9         7    90.57\n",
            "Broye           83.8        70.2          16         7    92.85\n",
            "           Infant.Mortality\n",
            "Courtelary             22.2\n",
            "Delemont               22.2\n",
            "Moutier                20.3\n",
            "Neuveville             20.6\n",
            "Porrentruy             26.6\n",
            "Broye                  23.6\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<IPython.core.display.Image object>"
            ]
          },
          "metadata": {},
          "execution_count": 12
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## How Do Data Transformation Techniques Enhance the Quality and Usability of Epidemiological Data?\n",
        "\n",
        "In the field of epidemiology, transforming data effectively is crucial for accurate analysis and interpretation. Several techniques are employed to ensure that data is in the appropriate format and accurately represents the information needed.\n",
        "\n",
        "**Recoding Data** is a fundamental transformation technique. **Numeric recoding** involves changing values into a different numeric scale or format, which is vital for standardizing measurements across different datasets. For example, converting temperatures from Fahrenheit to Celsius to maintain consistency. **Categorical recoding** involves converting categorical data into numeric codes or vice versa. This is often necessary for statistical modeling, such as coding 'Male' and 'Female' as 1 and 0, respectively.\n",
        "\n",
        "Another important technique is the creation of **Derived Variables**, which are new variables created from one or more existing variables. A common example in epidemiology is calculating the Body Mass Index (BMI) from height and weight measurements. This helps in simplifying and focusing analyses on relevant health indicators.\n",
        "\n",
        "- **Merging** is the process of combining two or more datasets based on a common variable. For instance, merging patient demographics with their medical records can provide a more comprehensive view of the patient's health status.\n",
        "\n",
        "- **Data Blending** is similar to merging but is used when datasets do not have a common structure or key. It involves combining data from different sources to create a comprehensive dataset, which is particularly useful in large-scale epidemiological studies that gather data from various sources.\n",
        "\n",
        "- **Concatenation** is a technique that joins two or more strings of data end-to-end. This is often used in string manipulation, such as combining first and last names into a full name.\n",
        "\n",
        "- **Appending** new data to the end of an existing dataset is a common practice, especially when adding new records to an ongoing study. This ensures that the dataset remains up-to-date and comprehensive.\n",
        "\n",
        "- **Imputation** refers to the process of replacing missing data with substituted values. This can be based on statistical methods like the mean or median of the existing data. Imputation is crucial for maintaining the integrity of the dataset, especially when dealing with incomplete data.\n",
        "\n",
        "- **Reduction/Aggregation** is about summarizing or aggregating detailed data into a more digestible and useful form. For example, calculating the average age or the prevalence rate of a disease in a study population. This makes the data more accessible for interpretation and decision-making.\n",
        "\n",
        "- **Transposing** data involves flipping the dataset, turning columns into rows and vice versa. This can be particularly useful for data visualization or different types of analysis where the orientation of the data matters.\n",
        "\n",
        "- **Normalization** adjusts the scale of data without distorting the differences in the ranges of values. This is often necessary in preparing data for machine learning models, as it ensures that all variables contribute equally to the analysis.\n",
        "\n",
        "- Finally, **Parsing/String Manipulation** involves extracting specific data from a string or converting data into a more usable format. This is essential in cleaning and preparing textual data for analysis, such as extracting specific information from clinical notes.\n",
        "\n",
        "These data transformation techniques play a critical role in refining raw data into an analyzable format, ensuring the accuracy and reliability of epidemiological studies.\n"
      ],
      "metadata": {
        "id": "lNJt8Pc-PurF"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Example: Data Transformation in Python\n",
        "\n",
        "Let's go through an example using Python to demonstrate several of these data transformation techniques.\n",
        "\n",
        "This Python script demonstrates recoding categorical data, creating derived variables, merging datasets, and normalizing a variable. Each step is crucial in preparing the data for accurate and insightful epidemiological analysis."
      ],
      "metadata": {
        "id": "_PyZkzfBRogs"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Recoding Categorical Data and Derived Variables:\n",
        "import pandas as pd\n",
        "\n",
        "# Sample dataset\n",
        "df = pd.DataFrame({\n",
        "    'Gender': ['Male', 'Female', 'Female'],\n",
        "    'Height_cm': [180, 165, 170],\n",
        "    'Weight_kg': [80, 60, 65]\n",
        "})\n",
        "\n",
        "# Recoding Gender\n",
        "df['Gender_Code'] = df['Gender'].map({'Male': 1, 'Female': 0})\n",
        "\n",
        "# Creating a Derived Variable - BMI\n",
        "df['BMI'] = df['Weight_kg'] / (df['Height_cm']/100) ** 2\n",
        "\n",
        "# Data Merge and Normalization:\n",
        "from sklearn.preprocessing import MinMaxScaler\n",
        "\n",
        "# Another dataset for merging\n",
        "medical_data = pd.DataFrame({\n",
        "    'Patient_ID': [1, 2, 3],\n",
        "    'Blood_Pressure': [120, 110, 115]\n",
        "})\n",
        "\n",
        "# Merging datasets\n",
        "merged_data = pd.merge(df, medical_data, left_index=True, right_index=True)\n",
        "\n",
        "# Normalizing Blood Pressure\n",
        "scaler = MinMaxScaler()\n",
        "merged_data['Normalized_BP'] = scaler.fit_transform(merged_data[['Blood_Pressure']])\n",
        "\n",
        "merged_data"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 143
        },
        "id": "S83nM22RSCEl",
        "outputId": "3fa1e1f3-53ff-4b41-a918-a39efa7c9cd5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Gender  Height_cm  Weight_kg  Gender_Code        BMI  Patient_ID  \\\n",
              "0    Male        180         80            1  24.691358           1   \n",
              "1  Female        165         60            0  22.038567           2   \n",
              "2  Female        170         65            0  22.491349           3   \n",
              "\n",
              "   Blood_Pressure  Normalized_BP  \n",
              "0             120            1.0  \n",
              "1             110            0.0  \n",
              "2             115            0.5  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-74a4aec3-9c87-4733-9370-1aa936d1a2f1\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Gender</th>\n",
              "      <th>Height_cm</th>\n",
              "      <th>Weight_kg</th>\n",
              "      <th>Gender_Code</th>\n",
              "      <th>BMI</th>\n",
              "      <th>Patient_ID</th>\n",
              "      <th>Blood_Pressure</th>\n",
              "      <th>Normalized_BP</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Male</td>\n",
              "      <td>180</td>\n",
              "      <td>80</td>\n",
              "      <td>1</td>\n",
              "      <td>24.691358</td>\n",
              "      <td>1</td>\n",
              "      <td>120</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Female</td>\n",
              "      <td>165</td>\n",
              "      <td>60</td>\n",
              "      <td>0</td>\n",
              "      <td>22.038567</td>\n",
              "      <td>2</td>\n",
              "      <td>110</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Female</td>\n",
              "      <td>170</td>\n",
              "      <td>65</td>\n",
              "      <td>0</td>\n",
              "      <td>22.491349</td>\n",
              "      <td>3</td>\n",
              "      <td>115</td>\n",
              "      <td>0.5</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-74a4aec3-9c87-4733-9370-1aa936d1a2f1')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-74a4aec3-9c87-4733-9370-1aa936d1a2f1 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-74a4aec3-9c87-4733-9370-1aa936d1a2f1');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-77788bd5-bd57-49ce-bd80-234434a6dff9\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-77788bd5-bd57-49ce-bd80-234434a6dff9')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-77788bd5-bd57-49ce-bd80-234434a6dff9 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## In What Ways Do Data Manipulation and Query Optimization Techniques Improve Efficiency and Insight in Epidemiological Data Analysis?\n",
        "\n",
        "Epidemiological research involves large and complex datasets. Efficient **data manipulation** and **query optimization techniques** are essential for extracting meaningful insights without excessive computational resources.\n",
        "\n",
        "**Filtering** involves selecting a subset of data based on certain criteria. It's crucial for focusing on relevant data, like selecting records of a particular disease. **Sorting** arranges data in a specific order (ascending or descending) based on one or more columns, aiding in understanding trends and patterns. **Date functions** work with date and time data, vital for allowing analysis over specific time periods or intervals. **Logical functions** (e.g., AND, OR, NOT) combine multiple conditions in data filtering or transformation. **Aggregate functions**, like SUM, AVG, MAX, and MIN, compute single values from groups of data and are essential in summarizing epidemiological data. **System functions** provide information about the database system, useful for managing and optimizing data.\n",
        "\n",
        "**Query optimization techniques** include **parametrization**, using parameters in queries instead of hard-coded values to improve performance and security. **Indexing** creates indexes on tables to significantly speed up query execution, especially in large datasets. Utilizing **temporary tables in query sets** improves the efficiency of complex queries by breaking them down into simpler steps. Querying only a **subset of records**, rather than the entire dataset, reduces the load on the system and speeds up the response time. Analyzing the **execution plan** of a query helps in understanding how a query is processed and in identifying potential areas for optimization.\n"
      ],
      "metadata": {
        "id": "Z9Bs7JgpQ1_Z"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "### Example: Data Manipulation and Query Optimization in SQL\n",
        "\n",
        "Here's an example using SQL, a common language for database management in epidemiology, demonstrating data manipulation and query optimization.\n",
        "\n",
        "\n",
        "In this SQL script, we perform data manipulation to filter and summarize data, and then use indexing to optimize a query. These techniques enhance the efficiency and speed of data analysis in epidemiological research."
      ],
      "metadata": {
        "id": "oDoRzqSCRPMS"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "%%sql\n",
        "-- Creating an index on the 'Disease' column in the Disease_Cases table for faster query execution\n",
        "CREATE INDEX idx_disease\n",
        "ON Disease_Cases (Disease);\n",
        "\n",
        "-- Running an optimized query to fetch recent cases of Influenza\n",
        "-- Utilizing indexing to improve performance\n",
        "SELECT P.Name, P.Age, DC.Date_Reported\n",
        "FROM Patients P\n",
        "JOIN Disease_Cases DC ON P.PatientID = DC.PatientID\n",
        "WHERE DC.Disease = 'Influenza'\n",
        "ORDER BY DC.Date_Reported DESC;\n",
        "\n",
        "-- Using a temporary table to store intermediate results for complex queries\n",
        "CREATE TEMPORARY TABLE TempRecentCases AS\n",
        "SELECT PatientID, MAX(Date_Reported) AS Recent_Report_Date\n",
        "FROM Disease_Cases\n",
        "GROUP BY PatientID;\n",
        "\n",
        "-- Joining the temporary table with the Patients table to get detailed information\n",
        "SELECT P.Name, P.Age, TRC.Recent_Report_Date\n",
        "FROM Patients P\n",
        "JOIN TempRecentCases TRC ON P.PatientID = TRC.PatientID;\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 126
        },
        "id": "yemmg9Pci7Bc",
        "outputId": "eede5134-c6f3-4038-e1b8-cd062b24354d"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            " * sqlite:///medical_data.db\n",
            "Done.\n",
            "Done.\n",
            "Done.\n",
            "Done.\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[]"
            ],
            "text/html": [
              "<table>\n",
              "    <thead>\n",
              "        <tr>\n",
              "            <th>Name</th>\n",
              "            <th>Age</th>\n",
              "            <th>Recent_Report_Date</th>\n",
              "        </tr>\n",
              "    </thead>\n",
              "    <tbody>\n",
              "    </tbody>\n",
              "</table>"
            ]
          },
          "metadata": {},
          "execution_count": 3
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## How Do Descriptive Statistics Methods Enhance the Understanding of Epidemiological Data?\"\n",
        "\n",
        "In the field of epidemiology, descriptive statistics are essential for summarizing and understanding the characteristics of health-related data. These methods provide insights into the central tendency and variability of data, as well as the frequency and distribution of health events.\n",
        "\n",
        "**Measures of Central Tendency** include the **mean**, **median**, and **mode**.\n",
        "- The mean provides the average value, useful in understanding the overall trend of data points.\n",
        "- The median, being the middle value, offers an understanding of the central point of a dataset, especially useful when the data is skewed.\n",
        "- The mode, the most frequently occurring value, can indicate the most common condition or characteristic in a dataset.\n",
        "\n",
        "**Measures of Dispersion** such as the **range** (difference between the max and min values), **distribution** (how values are spread across the dataset), **variance**, and **standard deviation** are crucial for understanding the spread and variability of data. These measures help in understanding the reliability and precision of the mean.\n",
        "\n",
        "**Frequencies and Percentages** are used to describe how often certain values or categories occur in the dataset. **Percent change** and **percent difference** are particularly useful in epidemiology for understanding the change in disease prevalence or the effectiveness of treatments over time. **Confidence intervals** provide a range within which the true value of a statistic is likely to fall, offering insights into the precision of estimates.\n"
      ],
      "metadata": {
        "id": "AYX1rw7YkGlT"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Example: Descriptive Statistics in Python\n",
        "\n",
        "Here's a brief example using Python to demonstrate some of these descriptive statistics methods. Suppose we have a dataset of patient ages and blood pressure readings."
      ],
      "metadata": {
        "id": "nCIXXgwtkShZ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "\n",
        "# Sample dataset\n",
        "data = {'Age': [25, 30, 35, 40, 45, 50],\n",
        "        'Blood_Pressure': [120, 125, 130, 135, 140, 145]}\n",
        "\n",
        "df = pd.DataFrame(data)\n",
        "\n",
        "# Calculating Measures of Central Tendency\n",
        "mean_age = df['Age'].mean()\n",
        "median_age = df['Age'].median()\n",
        "mode_bp = df['Blood_Pressure'].mode()[0]\n",
        "\n",
        "# Calculating Measures of Dispersion\n",
        "range_bp = df['Blood_Pressure'].max() - df['Blood_Pressure'].min()\n",
        "std_dev_bp = df['Blood_Pressure'].std()\n",
        "\n",
        "# Outputting the results\n",
        "print(f\"Mean Age: {mean_age}, Median Age: {median_age}, Mode of Blood Pressure: {mode_bp}\")\n",
        "print(f\"Range of Blood Pressure: {range_bp}, Standard Deviation of Blood Pressure: {std_dev_bp}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "OeIW0s7tkU_E",
        "outputId": "32fbc045-a268-4bce-fa96-cef17b9f1ca4"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mean Age: 37.5, Median Age: 37.5, Mode of Blood Pressure: 120\n",
            "Range of Blood Pressure: 25, Standard Deviation of Blood Pressure: 9.354143466934854\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Implementing Statistical Tests and Models in Epidemiological Research\n",
        "\n",
        "**\"How Do Statistical Tests and Models Contribute to Hypothesis Testing and Data Interpretation in Epidemiology?\"**\n",
        "\n",
        "In epidemiology, statistical tests and models play a crucial role in hypothesis testing and interpreting data. These methods allow researchers to determine the significance of their findings and understand the relationships between different variables.\n",
        "\n",
        "**T-tests** are used to compare the means of two groups, helping to determine if there is a statistically significant difference between them. The **Z-score** is a measure of how many standard deviations an element is from the mean, useful for identifying outliers. **P-values** help determine the significance of the results; a low p-value (< 0.05) often indicates that the findings are statistically significant.\n",
        "\n",
        "The **Chi-squared test** is commonly used to test relationships between categorical variables. It helps to determine whether there is a significant association between two variables.\n",
        "\n",
        "In **hypothesis testing**, understanding the concepts of **Type I error** (false positive) and **Type II error** (false negative) is crucial. A Type I error occurs when a true null hypothesis is incorrectly rejected, while a Type II error happens when a false null hypothesis is not rejected.\n",
        "\n",
        "**Simple linear regression** is a method used to understand the relationship between two continuous variables. It models the linear relationship between a dependent variable and one independent variable.\n"
      ],
      "metadata": {
        "id": "VCM_IMbyosgG"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Example: Analyzing AIDs data in R\n",
        "THe following R script analyzes data about patients diagnosed with AIDs."
      ],
      "metadata": {
        "id": "c2ZA5mLSpiP3"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import rpy2.robjects as robjects\n",
        "\n",
        "# Embedding R code in Python using rpy2\n",
        "r_code = \"\"\"\n",
        "library(MASS)\n",
        "\n",
        "# Using the 'Aids2' dataset from the MASS package\n",
        "data(Aids2)\n",
        "\n",
        "# Summarizing the dataset\n",
        "summary_Aids2 <- summary(Aids2)\n",
        "\n",
        "# T-test on age\n",
        "t_test_result <- t.test(Aids2$age)\n",
        "\n",
        "# Chi-Squared Test for association between state and status\n",
        "table_state_status <- table(Aids2$state, Aids2$status)\n",
        "chi_squared_result <- chisq.test(table_state_status)\n",
        "\n",
        "# Simple Linear Regression on age and year of diagnosis\n",
        "regression_model <- lm(diag ~ age, data = Aids2)\n",
        "\n",
        "# Correlation between age and year of diagnosis\n",
        "correlation_coefficient <- cor(Aids2$age, Aids2$diag)\n",
        "\n",
        "# Outputting results\n",
        "print(\n",
        "list(summary_Aids2 = summary_Aids2,\n",
        "     t_test_result = t_test_result,\n",
        "     chi_squared_result = chi_squared_result,\n",
        "     regression_model_summary = summary(regression_model),\n",
        "     correlation_coefficient = correlation_coefficient)\n",
        ")\n",
        "\"\"\"\n",
        "\n",
        "# Running the embedded R code\n",
        "results = robjects.r(r_code)\n",
        "results\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "_YYAj-BwkF8k",
        "outputId": "94c76df2-1209-4f3c-bbc7-5f0edb475fff"
      },
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "$summary_Aids2\n",
            "   state      sex           diag           death       status      T.categ    \n",
            " NSW  :1780   F:  89   Min.   : 8302   Min.   : 8469   A:1082   hs     :2465  \n",
            " Other: 249   M:2754   1st Qu.:10163   1st Qu.:10672   D:1761   blood  :  94  \n",
            " QLD  : 226            Median :10665   Median :11235            hsid   :  72  \n",
            " VIC  : 588            Mean   :10584   Mean   :10990            other  :  70  \n",
            "                       3rd Qu.:11103   3rd Qu.:11504            id     :  48  \n",
            "                       Max.   :11503   Max.   :11504            haem   :  46  \n",
            "                                                                (Other):  48  \n",
            "      age       \n",
            " Min.   : 0.00  \n",
            " 1st Qu.:30.00  \n",
            " Median :37.00  \n",
            " Mean   :37.41  \n",
            " 3rd Qu.:43.00  \n",
            " Max.   :82.00  \n",
            "                \n",
            "\n",
            "$t_test_result\n",
            "\n",
            "\tOne Sample t-test\n",
            "\n",
            "data:  Aids2$age\n",
            "t = 198.21, df = 2842, p-value < 2.2e-16\n",
            "alternative hypothesis: true mean is not equal to 0\n",
            "95 percent confidence interval:\n",
            " 37.03901 37.77914\n",
            "sample estimates:\n",
            "mean of x \n",
            " 37.40907 \n",
            "\n",
            "\n",
            "$chi_squared_result\n",
            "\n",
            "\tPearson's Chi-squared test\n",
            "\n",
            "data:  table_state_status\n",
            "X-squared = 4.7982, df = 3, p-value = 0.1872\n",
            "\n",
            "\n",
            "$regression_model_summary\n",
            "\n",
            "Call:\n",
            "lm(formula = diag ~ age, data = Aids2)\n",
            "\n",
            "Residuals:\n",
            "     Min       1Q   Median       3Q      Max \n",
            "-2303.35  -420.43    79.66   514.08   935.31 \n",
            "\n",
            "Coefficients:\n",
            "             Estimate Std. Error t value Pr(>|t|)    \n",
            "(Intercept) 10526.483     45.281 232.472   <2e-16 ***\n",
            "age             1.546      1.169   1.323    0.186    \n",
            "---\n",
            "Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1\n",
            "\n",
            "Residual standard error: 627.1 on 2841 degrees of freedom\n",
            "Multiple R-squared:  0.0006157,\tAdjusted R-squared:  0.0002639 \n",
            "F-statistic:  1.75 on 1 and 2841 DF,  p-value: 0.186\n",
            "\n",
            "\n",
            "$correlation_coefficient\n",
            "[1] 0.02481272\n",
            "\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<rpy2.robjects.vectors.ListVector object at 0x7f21407e8800> [RTYPES.VECSXP]\n",
              "R classes: ('list',)\n",
              "[StrSexp..., ListSex..., ListSex..., ListSex..., FloatSe...]\n",
              "  summary_Aids2: <class 'rpy2.rinterface_lib.sexp.StrSexpVector'>\n",
              "  <rpy2.rinterface_lib.sexp.StrSexpVector object at 0x7f2131f1e900> [RTYPES.STRSXP]\n",
              "  t_test_result: <class 'rpy2.rinterface.ListSexpVector'>\n",
              "  <rpy2.rinterface.ListSexpVector object at 0x7f2131efe000> [RTYPES.VECSXP]\n",
              "  chi_squared_result: <class 'rpy2.rinterface.ListSexpVector'>\n",
              "  <rpy2.rinterface.ListSexpVector object at 0x7f212d27ec40> [RTYPES.VECSXP]\n",
              "  regression_model_summary: <class 'rpy2.rinterface.ListSexpVector'>\n",
              "  <rpy2.rinterface.ListSexpVector object at 0x7f212d27c900> [RTYPES.VECSXP]\n",
              "  correlation_coefficient: <class 'rpy2.rinterface.FloatSexpVector'>\n",
              "  <rpy2.rinterface.FloatSexpVector object at 0x7f212a941200> [RTYPES.REALSXP]"
            ],
            "text/html": [
              "\n",
              "        <span>ListVector with 5 elements.</span>\n",
              "        <table>\n",
              "        <tbody>\n",
              "        \n",
              "          <tr>\n",
              "            <th>\n",
              "            summary_Aids2\n",
              "            </th>\n",
              "            <td>\n",
              "            <rpy2.rinterface_lib.sexp.StrSexpVector object at 0x7f212a9430c0> [RTYPES.STRSXP]\n",
              "            </td>\n",
              "          </tr>\n",
              "        \n",
              "          <tr>\n",
              "            <th>\n",
              "            t_test_result\n",
              "            </th>\n",
              "            <td>\n",
              "            <rpy2.rinterface.ListSexpVector object at 0x7f2140827f80> [RTYPES.VECSXP]\n",
              "            </td>\n",
              "          </tr>\n",
              "        \n",
              "          <tr>\n",
              "            <th>\n",
              "            chi_squared_result\n",
              "            </th>\n",
              "            <td>\n",
              "            <rpy2.rinterface.ListSexpVector object at 0x7f2144ce1ec0> [RTYPES.VECSXP]\n",
              "            </td>\n",
              "          </tr>\n",
              "        \n",
              "          <tr>\n",
              "            <th>\n",
              "            regression_model_summary\n",
              "            </th>\n",
              "            <td>\n",
              "            <rpy2.rinterface.ListSexpVector object at 0x7f2131f16980> [RTYPES.VECSXP]\n",
              "            </td>\n",
              "          </tr>\n",
              "        \n",
              "          <tr>\n",
              "            <th>\n",
              "            correlation_coefficient\n",
              "            </th>\n",
              "            <td>\n",
              "            <rpy2.rinterface.FloatSexpVector object at 0x7f212d27f240> [RTYPES.REALSXP]\n",
              "            </td>\n",
              "          </tr>\n",
              "        \n",
              "        </tbody>\n",
              "        </table>\n",
              "        "
            ]
          },
          "metadata": {},
          "execution_count": 18
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "5gXRqmtR9K2W"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}
