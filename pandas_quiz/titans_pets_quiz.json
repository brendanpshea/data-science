[
    {"question": "Display the first 5 rows of the DataFrame. Use the appropriate method to preview the data.", "answer": "result = data.head()"},
    {"question": "Display the last 5 rows of the DataFrame. Use the appropriate method to view the final rows.", "answer": "result = data.tail()"},
    {"question": "Generate descriptive statistics for numerical columns. Use the built-in method for descriptive statistics.", "answer": "result = data.describe()"},
    {"question": "Check for missing values in the DataFrame. Use the isnull method and sum the results to get an overview of missing values.", "answer": "result = data.isnull().sum()"},
    {"question": "Fill missing values with the mean of the column. Use the fillna method along with the mean function.", "answer": "result = data.fillna(data.mean())"},
    {"question": "Drop rows with any missing values. Use the dropna method to remove rows containing null values.", "answer": "result = data.dropna()"},
    {"question": "Replace 'N/A' strings with actual NaN values. Use the replace method to substitute values in the DataFrame.", "answer": "result = data.replace('N/A', np.nan)"},
    {"question": "Convert 'total_sales' column to numeric. Use the to_numeric method after cleaning the string data.", "answer": "result = pd.to_numeric(data['total_sales'].str.replace('$', ''))"},
    {"question": "Drop duplicate rows in the DataFrame. Use the drop_duplicates method to remove identical rows.", "answer": "result = data.drop_duplicates()"},
    {"question": "Rename the column 'num_adopted' to 'adopted'. Use the rename method to change the column name.", "answer": "result = data.rename(columns={'num_adopted': 'adopted'})"},
    {"question": "Convert 'date' column to datetime. Use the to_datetime method to convert the column.", "answer": "result = pd.to_datetime(data['date'])"},
    {"question": "Sort the DataFrame by 'total_sales' in descending order. Use the sort_values method to sort based on 'total_sales'.", "answer": "result = data.sort_values(by='total_sales', ascending=False)"},
    {"question": "Select only the 'store_id' and 'pet_type' columns. Use column selection to filter specific columns.", "answer": "result = data[['store_id', 'pet_type']]"},
    {"question": "Filter rows where 'num_adopted' is greater than 5. Use conditional filtering to select rows based on a column's values.", "answer": "result = data[data['num_adopted'] > 5]"},
    {"question": "Group the data by 'store_id' and calculate the sum of 'num_adopted'. Use the groupby method to group by 'store_id' and sum.", "answer": "result = data.groupby('store_id')['num_adopted'].sum()"},
    {"question": "Replace the negative values in 'customer_satisfaction' with NaN. Use the where method to set conditions for replacements.", "answer": "result = data['customer_satisfaction'].where(data['customer_satisfaction'] >= 0, np.nan)"},
    {"question": "Create a new column 'revenue_per_adoption' by dividing 'total_sales' by 'num_adopted'. Use basic arithmetic along with to_numeric conversion.", "answer": "result = data['revenue_per_adoption'] = pd.to_numeric(data['total_sales'].str.replace('$', '')) / data['num_adopted'].astype(float)"},
    {"question": "Set 'store_id' and 'date' as the index of the DataFrame. Use the set_index method to define multiple columns as the index.", "answer": "result = data.set_index(['store_id', 'date'])"},
    {"question": "Reset the index of the DataFrame. Use the reset_index method to restore the default indexing.", "answer": "result = data.reset_index()"},
    {"question": "Get the unique values in the 'pet_type' column. Use the unique method to retrieve distinct values from the column.", "answer": "result = data['pet_type'].unique()"},
    {"question": "Count the occurrences of each 'pet_type'. Use the value_counts method to count how many times each value occurs.", "answer": "result = data['pet_type'].value_counts()"},
    {"question": "Calculate the average 'customer_satisfaction' per 'store_id'. Use the groupby method to aggregate and calculate averages.", "answer": "result = data.groupby('store_id')['customer_satisfaction'].mean()"},
    {"question": "Remove rows where 'num_adopted' is less than or equal to 1. Use conditional filtering to remove rows with values less than 1.", "answer": "result = data[data['num_adopted'] > 1]"},
    {"question": "Replace all instances of 'robin' in 'employee' column with 'Robin'. Use the replace method to substitute values in the column.", "answer": "result = data['employee'] = data['employee'].replace('robin', 'Robin')"},
    {"question": "Filter rows where 'total_sales' is greater than $500. Use conditional filtering after converting 'total_sales' to numeric.", "answer": "result = data[data['total_sales'].str.replace('$', '').astype(float) > 500]"}
]


